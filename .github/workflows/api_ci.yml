name: CI (api)

on:
  push:
    branches: [ master ]

  pull_request:
    branches: [ master ]

jobs:

  health-check-job:

    runs-on: ubuntu-latest

    steps:
    - name: code checkout 
      uses: actions/checkout@v2

    - name: check python version
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'

    - name: install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r ./api/requirements.txt

    - name: build
      run: |
        docker-compose up --build -d api
      env:
        DB_HOST: db
        DB_NAME: myproject
        DB_USER: myuser
        DB_PASSWORD: password

    # if you don't want to have linter analysis, comment this.
    - name: lint
      uses: lgeiger/pyflakes-action@master

    - name: tests
      run: docker-compose run api python manage.py test

  code_quality_with_sonar:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: sonarcloud scan
        uses: sonarsource/sonarcloud-github-action@master
        with:
          projectBaseDir: api
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  coverage_and_code_quality_with_cc_and_codev:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@master
    - name: Setup Python
      uses: actions/setup-python@master
      with:
        python-version: 3.7

    - name: api build
      run: docker-compose up --build -d api

    - name: tests
      run: docker-compose run api coverage run manage.py test

    - name: coverage report
      run: docker-compose run api coverage xml

    - name: upload coverage to codecov
      uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: true
        verbose: true

  deploy:

    needs: [health-check-job, code_quality_with_sonar]
    
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: "api/"

    steps:
    - uses: actions/checkout@v2
    - name: docker login
      run: docker login -u ${{secrets.DOCKER_USER}} -p ${{secrets.DOCKER_PASSWORD}}

    - name: Build the Docker image
      run: docker build . --file Dockerfile --tag gabrielfilipe7/gabrielfilipe7unb-trabalho-individual-2020-2:api_latest

    - name: Docker Push
      run: docker push gabrielfilipe7/gabrielfilipe7unb-trabalho-individual-2020-2:api_latest 

  deploy_to_heroku:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: heroku
        uses: gonuit/heroku-docker-deploy@v1.3.2
        with:
          email: ${{ secrets.HEROKU_EMAIL }}
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          heroku_app_name: ${{ secrets.HEROKU_APP_NAME_API }}
          dockerfile_directory: ./api/
          dockerfile_name: Dockerfile
          docker_options: "--no-cache"
          process_type: web